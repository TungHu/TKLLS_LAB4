// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2023 10:27:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	CLK,
	I,
	sampler_tx
);
input  CLK;
input [15:0] I;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or I)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	Alu,
	D0,
	D1,
	D2,
	D3,
	ins,
	OA,
	OB,
	Output,
	RDA,
	RDB,
	WR,
	sampler_rx
);
input [2:0] Alu;
input  D0;
input  D1;
input  D2;
input  D3;
input [7:0] ins;
input [15:0] OA;
input [15:0] OB;
input [15:0] Output;
input [2:0] RDA;
input [2:0] RDB;
input [7:0] WR;
input sampler_rx;

reg [2:0] Alu_expected;
reg  D0_expected;
reg  D1_expected;
reg  D2_expected;
reg  D3_expected;
reg [7:0] ins_expected;
reg [15:0] OA_expected;
reg [15:0] OB_expected;
reg [15:0] Output_expected;
reg [2:0] RDA_expected;
reg [2:0] RDB_expected;
reg [7:0] WR_expected;

reg [2:0] Alu_prev;
reg  D0_prev;
reg  D1_prev;
reg  D2_prev;
reg  D3_prev;
reg [7:0] ins_prev;
reg [15:0] OA_prev;
reg [15:0] OB_prev;
reg [15:0] Output_prev;
reg [2:0] RDA_prev;
reg [2:0] RDB_prev;
reg [7:0] WR_prev;

reg  D0_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  D3_expected_prev;
reg [15:0] OA_expected_prev;
reg [15:0] OB_expected_prev;
reg [15:0] Output_expected_prev;
reg [2:0] RDA_expected_prev;
reg [2:0] RDB_expected_prev;
reg [7:0] WR_expected_prev;

reg  last_D0_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_D3_exp;
reg [15:0] last_OA_exp;
reg [15:0] last_OB_exp;
reg [15:0] last_Output_exp;
reg [2:0] last_RDA_exp;
reg [2:0] last_RDB_exp;
reg [7:0] last_WR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	Alu_prev = Alu;
	D0_prev = D0;
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	ins_prev = ins;
	OA_prev = OA;
	OB_prev = OB;
	Output_prev = Output;
	RDA_prev = RDA;
	RDB_prev = RDB;
	WR_prev = WR;
end

// update expected /o prevs

always @(trigger)
begin
	D0_expected_prev = D0_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	OA_expected_prev = OA_expected;
	OB_expected_prev = OB_expected;
	Output_expected_prev = Output_expected;
	RDA_expected_prev = RDA_expected;
	RDB_expected_prev = RDB_expected;
	WR_expected_prev = WR_expected;
end


// expected WR[ 7 ]
initial
begin
	WR_expected[7] = 1'bX;
end 
// expected WR[ 6 ]
initial
begin
	WR_expected[6] = 1'bX;
end 
// expected WR[ 5 ]
initial
begin
	WR_expected[5] = 1'bX;
end 
// expected WR[ 4 ]
initial
begin
	WR_expected[4] = 1'bX;
end 
// expected WR[ 3 ]
initial
begin
	WR_expected[3] = 1'bX;
end 
// expected WR[ 2 ]
initial
begin
	WR_expected[2] = 1'bX;
end 
// expected WR[ 1 ]
initial
begin
	WR_expected[1] = 1'bX;
end 
// expected WR[ 0 ]
initial
begin
	WR_expected[0] = 1'bX;
end 
// expected RDA[ 2 ]
initial
begin
	RDA_expected[2] = 1'bX;
end 
// expected RDA[ 1 ]
initial
begin
	RDA_expected[1] = 1'bX;
end 
// expected RDA[ 0 ]
initial
begin
	RDA_expected[0] = 1'bX;
end 
// expected RDB[ 2 ]
initial
begin
	RDB_expected[2] = 1'bX;
end 
// expected RDB[ 1 ]
initial
begin
	RDB_expected[1] = 1'bX;
end 
// expected RDB[ 0 ]
initial
begin
	RDB_expected[0] = 1'bX;
end 
// expected OA[ 15 ]
initial
begin
	OA_expected[15] = 1'bX;
end 
// expected OA[ 14 ]
initial
begin
	OA_expected[14] = 1'bX;
end 
// expected OA[ 13 ]
initial
begin
	OA_expected[13] = 1'bX;
end 
// expected OA[ 12 ]
initial
begin
	OA_expected[12] = 1'bX;
end 
// expected OA[ 11 ]
initial
begin
	OA_expected[11] = 1'bX;
end 
// expected OA[ 10 ]
initial
begin
	OA_expected[10] = 1'bX;
end 
// expected OA[ 9 ]
initial
begin
	OA_expected[9] = 1'bX;
end 
// expected OA[ 8 ]
initial
begin
	OA_expected[8] = 1'bX;
end 
// expected OA[ 7 ]
initial
begin
	OA_expected[7] = 1'bX;
end 
// expected OA[ 6 ]
initial
begin
	OA_expected[6] = 1'bX;
end 
// expected OA[ 5 ]
initial
begin
	OA_expected[5] = 1'bX;
end 
// expected OA[ 4 ]
initial
begin
	OA_expected[4] = 1'bX;
end 
// expected OA[ 3 ]
initial
begin
	OA_expected[3] = 1'bX;
end 
// expected OA[ 2 ]
initial
begin
	OA_expected[2] = 1'bX;
end 
// expected OA[ 1 ]
initial
begin
	OA_expected[1] = 1'bX;
end 
// expected OA[ 0 ]
initial
begin
	OA_expected[0] = 1'bX;
end 
// expected OB[ 15 ]
initial
begin
	OB_expected[15] = 1'bX;
end 
// expected OB[ 14 ]
initial
begin
	OB_expected[14] = 1'bX;
end 
// expected OB[ 13 ]
initial
begin
	OB_expected[13] = 1'bX;
end 
// expected OB[ 12 ]
initial
begin
	OB_expected[12] = 1'bX;
end 
// expected OB[ 11 ]
initial
begin
	OB_expected[11] = 1'bX;
end 
// expected OB[ 10 ]
initial
begin
	OB_expected[10] = 1'bX;
end 
// expected OB[ 9 ]
initial
begin
	OB_expected[9] = 1'bX;
end 
// expected OB[ 8 ]
initial
begin
	OB_expected[8] = 1'bX;
end 
// expected OB[ 7 ]
initial
begin
	OB_expected[7] = 1'bX;
end 
// expected OB[ 6 ]
initial
begin
	OB_expected[6] = 1'bX;
end 
// expected OB[ 5 ]
initial
begin
	OB_expected[5] = 1'bX;
end 
// expected OB[ 4 ]
initial
begin
	OB_expected[4] = 1'bX;
end 
// expected OB[ 3 ]
initial
begin
	OB_expected[3] = 1'bX;
end 
// expected OB[ 2 ]
initial
begin
	OB_expected[2] = 1'bX;
end 
// expected OB[ 1 ]
initial
begin
	OB_expected[1] = 1'bX;
end 
// expected OB[ 0 ]
initial
begin
	OB_expected[0] = 1'bX;
end 
// expected \Output [ 15 ]
initial
begin
	Output_expected[15] = 1'bX;
end 
// expected \Output [ 14 ]
initial
begin
	Output_expected[14] = 1'bX;
end 
// expected \Output [ 13 ]
initial
begin
	Output_expected[13] = 1'bX;
end 
// expected \Output [ 12 ]
initial
begin
	Output_expected[12] = 1'bX;
end 
// expected \Output [ 11 ]
initial
begin
	Output_expected[11] = 1'bX;
end 
// expected \Output [ 10 ]
initial
begin
	Output_expected[10] = 1'bX;
end 
// expected \Output [ 9 ]
initial
begin
	Output_expected[9] = 1'bX;
end 
// expected \Output [ 8 ]
initial
begin
	Output_expected[8] = 1'bX;
end 
// expected \Output [ 7 ]
initial
begin
	Output_expected[7] = 1'bX;
end 
// expected \Output [ 6 ]
initial
begin
	Output_expected[6] = 1'bX;
end 
// expected \Output [ 5 ]
initial
begin
	Output_expected[5] = 1'bX;
end 
// expected \Output [ 4 ]
initial
begin
	Output_expected[4] = 1'bX;
end 
// expected \Output [ 3 ]
initial
begin
	Output_expected[3] = 1'bX;
end 
// expected \Output [ 2 ]
initial
begin
	Output_expected[2] = 1'bX;
end 
// expected \Output [ 1 ]
initial
begin
	Output_expected[1] = 1'bX;
end 
// expected \Output [ 0 ]
initial
begin
	Output_expected[0] = 1'bX;
end 

// expected D3
initial
begin
	D3_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected D0
initial
begin
	D0_expected = 1'bX;
end 
// generate trigger
always @(Alu_expected or Alu or D0_expected or D0 or D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or ins_expected or ins or OA_expected or OA or OB_expected or OB or Output_expected or Output or RDA_expected or RDA or RDB_expected or RDB or WR_expected or WR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Alu = %b | expected D0 = %b | expected D1 = %b | expected D2 = %b | expected D3 = %b | expected ins = %b | expected OA = %b | expected OB = %b | expected Output = %b | expected RDA = %b | expected RDB = %b | expected WR = %b | ",Alu_expected_prev,D0_expected_prev,D1_expected_prev,D2_expected_prev,D3_expected_prev,ins_expected_prev,OA_expected_prev,OB_expected_prev,Output_expected_prev,RDA_expected_prev,RDB_expected_prev,WR_expected_prev);
	$display("| real Alu = %b | real D0 = %b | real D1 = %b | real D2 = %b | real D3 = %b | real ins = %b | real OA = %b | real OB = %b | real Output = %b | real RDA = %b | real RDB = %b | real WR = %b | ",Alu_prev,D0_prev,D1_prev,D2_prev,D3_prev,ins_prev,OA_prev,OB_prev,Output_prev,RDA_prev,RDB_prev,WR_prev);
`endif
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( D3_expected_prev !== 1'bx ) && ( D3_prev !== D3_expected_prev )
		&& ((D3_expected_prev !== last_D3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D3_exp = D3_expected_prev;
	end
	if (
		( OA_expected_prev[0] !== 1'bx ) && ( OA_prev[0] !== OA_expected_prev[0] )
		&& ((OA_expected_prev[0] !== last_OA_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[0] = OA_expected_prev[0];
	end
	if (
		( OA_expected_prev[1] !== 1'bx ) && ( OA_prev[1] !== OA_expected_prev[1] )
		&& ((OA_expected_prev[1] !== last_OA_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[1] = OA_expected_prev[1];
	end
	if (
		( OA_expected_prev[2] !== 1'bx ) && ( OA_prev[2] !== OA_expected_prev[2] )
		&& ((OA_expected_prev[2] !== last_OA_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[2] = OA_expected_prev[2];
	end
	if (
		( OA_expected_prev[3] !== 1'bx ) && ( OA_prev[3] !== OA_expected_prev[3] )
		&& ((OA_expected_prev[3] !== last_OA_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[3] = OA_expected_prev[3];
	end
	if (
		( OA_expected_prev[4] !== 1'bx ) && ( OA_prev[4] !== OA_expected_prev[4] )
		&& ((OA_expected_prev[4] !== last_OA_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[4] = OA_expected_prev[4];
	end
	if (
		( OA_expected_prev[5] !== 1'bx ) && ( OA_prev[5] !== OA_expected_prev[5] )
		&& ((OA_expected_prev[5] !== last_OA_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[5] = OA_expected_prev[5];
	end
	if (
		( OA_expected_prev[6] !== 1'bx ) && ( OA_prev[6] !== OA_expected_prev[6] )
		&& ((OA_expected_prev[6] !== last_OA_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[6] = OA_expected_prev[6];
	end
	if (
		( OA_expected_prev[7] !== 1'bx ) && ( OA_prev[7] !== OA_expected_prev[7] )
		&& ((OA_expected_prev[7] !== last_OA_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[7] = OA_expected_prev[7];
	end
	if (
		( OA_expected_prev[8] !== 1'bx ) && ( OA_prev[8] !== OA_expected_prev[8] )
		&& ((OA_expected_prev[8] !== last_OA_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[8] = OA_expected_prev[8];
	end
	if (
		( OA_expected_prev[9] !== 1'bx ) && ( OA_prev[9] !== OA_expected_prev[9] )
		&& ((OA_expected_prev[9] !== last_OA_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[9] = OA_expected_prev[9];
	end
	if (
		( OA_expected_prev[10] !== 1'bx ) && ( OA_prev[10] !== OA_expected_prev[10] )
		&& ((OA_expected_prev[10] !== last_OA_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[10] = OA_expected_prev[10];
	end
	if (
		( OA_expected_prev[11] !== 1'bx ) && ( OA_prev[11] !== OA_expected_prev[11] )
		&& ((OA_expected_prev[11] !== last_OA_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[11] = OA_expected_prev[11];
	end
	if (
		( OA_expected_prev[12] !== 1'bx ) && ( OA_prev[12] !== OA_expected_prev[12] )
		&& ((OA_expected_prev[12] !== last_OA_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[12] = OA_expected_prev[12];
	end
	if (
		( OA_expected_prev[13] !== 1'bx ) && ( OA_prev[13] !== OA_expected_prev[13] )
		&& ((OA_expected_prev[13] !== last_OA_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[13] = OA_expected_prev[13];
	end
	if (
		( OA_expected_prev[14] !== 1'bx ) && ( OA_prev[14] !== OA_expected_prev[14] )
		&& ((OA_expected_prev[14] !== last_OA_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[14] = OA_expected_prev[14];
	end
	if (
		( OA_expected_prev[15] !== 1'bx ) && ( OA_prev[15] !== OA_expected_prev[15] )
		&& ((OA_expected_prev[15] !== last_OA_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OA_exp[15] = OA_expected_prev[15];
	end
	if (
		( OB_expected_prev[0] !== 1'bx ) && ( OB_prev[0] !== OB_expected_prev[0] )
		&& ((OB_expected_prev[0] !== last_OB_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[0] = OB_expected_prev[0];
	end
	if (
		( OB_expected_prev[1] !== 1'bx ) && ( OB_prev[1] !== OB_expected_prev[1] )
		&& ((OB_expected_prev[1] !== last_OB_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[1] = OB_expected_prev[1];
	end
	if (
		( OB_expected_prev[2] !== 1'bx ) && ( OB_prev[2] !== OB_expected_prev[2] )
		&& ((OB_expected_prev[2] !== last_OB_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[2] = OB_expected_prev[2];
	end
	if (
		( OB_expected_prev[3] !== 1'bx ) && ( OB_prev[3] !== OB_expected_prev[3] )
		&& ((OB_expected_prev[3] !== last_OB_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[3] = OB_expected_prev[3];
	end
	if (
		( OB_expected_prev[4] !== 1'bx ) && ( OB_prev[4] !== OB_expected_prev[4] )
		&& ((OB_expected_prev[4] !== last_OB_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[4] = OB_expected_prev[4];
	end
	if (
		( OB_expected_prev[5] !== 1'bx ) && ( OB_prev[5] !== OB_expected_prev[5] )
		&& ((OB_expected_prev[5] !== last_OB_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[5] = OB_expected_prev[5];
	end
	if (
		( OB_expected_prev[6] !== 1'bx ) && ( OB_prev[6] !== OB_expected_prev[6] )
		&& ((OB_expected_prev[6] !== last_OB_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[6] = OB_expected_prev[6];
	end
	if (
		( OB_expected_prev[7] !== 1'bx ) && ( OB_prev[7] !== OB_expected_prev[7] )
		&& ((OB_expected_prev[7] !== last_OB_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[7] = OB_expected_prev[7];
	end
	if (
		( OB_expected_prev[8] !== 1'bx ) && ( OB_prev[8] !== OB_expected_prev[8] )
		&& ((OB_expected_prev[8] !== last_OB_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[8] = OB_expected_prev[8];
	end
	if (
		( OB_expected_prev[9] !== 1'bx ) && ( OB_prev[9] !== OB_expected_prev[9] )
		&& ((OB_expected_prev[9] !== last_OB_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[9] = OB_expected_prev[9];
	end
	if (
		( OB_expected_prev[10] !== 1'bx ) && ( OB_prev[10] !== OB_expected_prev[10] )
		&& ((OB_expected_prev[10] !== last_OB_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[10] = OB_expected_prev[10];
	end
	if (
		( OB_expected_prev[11] !== 1'bx ) && ( OB_prev[11] !== OB_expected_prev[11] )
		&& ((OB_expected_prev[11] !== last_OB_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[11] = OB_expected_prev[11];
	end
	if (
		( OB_expected_prev[12] !== 1'bx ) && ( OB_prev[12] !== OB_expected_prev[12] )
		&& ((OB_expected_prev[12] !== last_OB_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[12] = OB_expected_prev[12];
	end
	if (
		( OB_expected_prev[13] !== 1'bx ) && ( OB_prev[13] !== OB_expected_prev[13] )
		&& ((OB_expected_prev[13] !== last_OB_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[13] = OB_expected_prev[13];
	end
	if (
		( OB_expected_prev[14] !== 1'bx ) && ( OB_prev[14] !== OB_expected_prev[14] )
		&& ((OB_expected_prev[14] !== last_OB_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[14] = OB_expected_prev[14];
	end
	if (
		( OB_expected_prev[15] !== 1'bx ) && ( OB_prev[15] !== OB_expected_prev[15] )
		&& ((OB_expected_prev[15] !== last_OB_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OB_exp[15] = OB_expected_prev[15];
	end
	if (
		( Output_expected_prev[0] !== 1'bx ) && ( Output_prev[0] !== Output_expected_prev[0] )
		&& ((Output_expected_prev[0] !== last_Output_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[0] = Output_expected_prev[0];
	end
	if (
		( Output_expected_prev[1] !== 1'bx ) && ( Output_prev[1] !== Output_expected_prev[1] )
		&& ((Output_expected_prev[1] !== last_Output_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[1] = Output_expected_prev[1];
	end
	if (
		( Output_expected_prev[2] !== 1'bx ) && ( Output_prev[2] !== Output_expected_prev[2] )
		&& ((Output_expected_prev[2] !== last_Output_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[2] = Output_expected_prev[2];
	end
	if (
		( Output_expected_prev[3] !== 1'bx ) && ( Output_prev[3] !== Output_expected_prev[3] )
		&& ((Output_expected_prev[3] !== last_Output_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[3] = Output_expected_prev[3];
	end
	if (
		( Output_expected_prev[4] !== 1'bx ) && ( Output_prev[4] !== Output_expected_prev[4] )
		&& ((Output_expected_prev[4] !== last_Output_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[4] = Output_expected_prev[4];
	end
	if (
		( Output_expected_prev[5] !== 1'bx ) && ( Output_prev[5] !== Output_expected_prev[5] )
		&& ((Output_expected_prev[5] !== last_Output_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[5] = Output_expected_prev[5];
	end
	if (
		( Output_expected_prev[6] !== 1'bx ) && ( Output_prev[6] !== Output_expected_prev[6] )
		&& ((Output_expected_prev[6] !== last_Output_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[6] = Output_expected_prev[6];
	end
	if (
		( Output_expected_prev[7] !== 1'bx ) && ( Output_prev[7] !== Output_expected_prev[7] )
		&& ((Output_expected_prev[7] !== last_Output_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[7] = Output_expected_prev[7];
	end
	if (
		( Output_expected_prev[8] !== 1'bx ) && ( Output_prev[8] !== Output_expected_prev[8] )
		&& ((Output_expected_prev[8] !== last_Output_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[8] = Output_expected_prev[8];
	end
	if (
		( Output_expected_prev[9] !== 1'bx ) && ( Output_prev[9] !== Output_expected_prev[9] )
		&& ((Output_expected_prev[9] !== last_Output_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[9] = Output_expected_prev[9];
	end
	if (
		( Output_expected_prev[10] !== 1'bx ) && ( Output_prev[10] !== Output_expected_prev[10] )
		&& ((Output_expected_prev[10] !== last_Output_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[10] = Output_expected_prev[10];
	end
	if (
		( Output_expected_prev[11] !== 1'bx ) && ( Output_prev[11] !== Output_expected_prev[11] )
		&& ((Output_expected_prev[11] !== last_Output_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[11] = Output_expected_prev[11];
	end
	if (
		( Output_expected_prev[12] !== 1'bx ) && ( Output_prev[12] !== Output_expected_prev[12] )
		&& ((Output_expected_prev[12] !== last_Output_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[12] = Output_expected_prev[12];
	end
	if (
		( Output_expected_prev[13] !== 1'bx ) && ( Output_prev[13] !== Output_expected_prev[13] )
		&& ((Output_expected_prev[13] !== last_Output_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[13] = Output_expected_prev[13];
	end
	if (
		( Output_expected_prev[14] !== 1'bx ) && ( Output_prev[14] !== Output_expected_prev[14] )
		&& ((Output_expected_prev[14] !== last_Output_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[14] = Output_expected_prev[14];
	end
	if (
		( Output_expected_prev[15] !== 1'bx ) && ( Output_prev[15] !== Output_expected_prev[15] )
		&& ((Output_expected_prev[15] !== last_Output_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_exp[15] = Output_expected_prev[15];
	end
	if (
		( RDA_expected_prev[0] !== 1'bx ) && ( RDA_prev[0] !== RDA_expected_prev[0] )
		&& ((RDA_expected_prev[0] !== last_RDA_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RDA_exp[0] = RDA_expected_prev[0];
	end
	if (
		( RDA_expected_prev[1] !== 1'bx ) && ( RDA_prev[1] !== RDA_expected_prev[1] )
		&& ((RDA_expected_prev[1] !== last_RDA_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RDA_exp[1] = RDA_expected_prev[1];
	end
	if (
		( RDA_expected_prev[2] !== 1'bx ) && ( RDA_prev[2] !== RDA_expected_prev[2] )
		&& ((RDA_expected_prev[2] !== last_RDA_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RDA_exp[2] = RDA_expected_prev[2];
	end
	if (
		( RDB_expected_prev[0] !== 1'bx ) && ( RDB_prev[0] !== RDB_expected_prev[0] )
		&& ((RDB_expected_prev[0] !== last_RDB_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RDB_exp[0] = RDB_expected_prev[0];
	end
	if (
		( RDB_expected_prev[1] !== 1'bx ) && ( RDB_prev[1] !== RDB_expected_prev[1] )
		&& ((RDB_expected_prev[1] !== last_RDB_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RDB_exp[1] = RDB_expected_prev[1];
	end
	if (
		( RDB_expected_prev[2] !== 1'bx ) && ( RDB_prev[2] !== RDB_expected_prev[2] )
		&& ((RDB_expected_prev[2] !== last_RDB_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RDB_exp[2] = RDB_expected_prev[2];
	end
	if (
		( WR_expected_prev[0] !== 1'bx ) && ( WR_prev[0] !== WR_expected_prev[0] )
		&& ((WR_expected_prev[0] !== last_WR_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_WR_exp[0] = WR_expected_prev[0];
	end
	if (
		( WR_expected_prev[1] !== 1'bx ) && ( WR_prev[1] !== WR_expected_prev[1] )
		&& ((WR_expected_prev[1] !== last_WR_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_WR_exp[1] = WR_expected_prev[1];
	end
	if (
		( WR_expected_prev[2] !== 1'bx ) && ( WR_prev[2] !== WR_expected_prev[2] )
		&& ((WR_expected_prev[2] !== last_WR_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_WR_exp[2] = WR_expected_prev[2];
	end
	if (
		( WR_expected_prev[3] !== 1'bx ) && ( WR_prev[3] !== WR_expected_prev[3] )
		&& ((WR_expected_prev[3] !== last_WR_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_WR_exp[3] = WR_expected_prev[3];
	end
	if (
		( WR_expected_prev[4] !== 1'bx ) && ( WR_prev[4] !== WR_expected_prev[4] )
		&& ((WR_expected_prev[4] !== last_WR_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_WR_exp[4] = WR_expected_prev[4];
	end
	if (
		( WR_expected_prev[5] !== 1'bx ) && ( WR_prev[5] !== WR_expected_prev[5] )
		&& ((WR_expected_prev[5] !== last_WR_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_WR_exp[5] = WR_expected_prev[5];
	end
	if (
		( WR_expected_prev[6] !== 1'bx ) && ( WR_prev[6] !== WR_expected_prev[6] )
		&& ((WR_expected_prev[6] !== last_WR_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_WR_exp[6] = WR_expected_prev[6];
	end
	if (
		( WR_expected_prev[7] !== 1'bx ) && ( WR_prev[7] !== WR_expected_prev[7] )
		&& ((WR_expected_prev[7] !== last_WR_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_WR_exp[7] = WR_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] I;
// wires                                               
wire [2:0] Alu;
wire D0;
wire D1;
wire D2;
wire D3;
wire [7:0] ins;
wire [15:0] OA;
wire [15:0] OB;
wire [15:0] Output;
wire [2:0] RDA;
wire [2:0] RDB;
wire [7:0] WR;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.Alu(Alu),
	.CLK(CLK),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.I(I),
	.ins(ins),
	.OA(OA),
	.OB(OB),
	.\Output (Output),
	.RDA(RDA),
	.RDB(RDB),
	.WR(WR)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// I[ 15 ]
initial
begin
	I[15] = 1'b0;
end 
// I[ 14 ]
initial
begin
	I[14] = 1'b0;
end 
// I[ 13 ]
initial
begin
	I[13] = 1'b0;
end 
// I[ 12 ]
initial
begin
	I[12] = 1'b0;
end 
// I[ 11 ]
initial
begin
	I[11] = 1'b0;
end 
// I[ 10 ]
initial
begin
	I[10] = 1'b0;
end 
// I[ 9 ]
initial
begin
	I[9] = 1'b0;
end 
// I[ 8 ]
initial
begin
	I[8] = 1'b0;
end 
// I[ 7 ]
initial
begin
	I[7] = 1'b0;
end 
// I[ 6 ]
initial
begin
	I[6] = 1'b0;
end 
// I[ 5 ]
initial
begin
	I[5] = 1'b0;
	I[5] = #540000 1'b1;
end 
// I[ 4 ]
initial
begin
	I[4] = 1'b0;
	I[4] = #220000 1'b1;
	I[4] = #320000 1'b0;
	I[4] = #320000 1'b1;
end 
// I[ 3 ]
initial
begin
	I[3] = 1'b0;
	# 60000;
	repeat(2)
	begin
		I[3] = 1'b1;
		I[3] = #160000 1'b0;
		# 160000;
	end
	I[3] = 1'b1;
	I[3] = #160000 1'b0;
end 
// I[ 2 ]
initial
begin
	I[2] = 1'b1;
	# 60000;
	repeat(5)
	begin
		I[2] = 1'b0;
		I[2] = #80000 1'b1;
		# 80000;
	end
	I[2] = 1'b0;
	I[2] = #80000 1'b1;
end 
// I[ 1 ]
initial
begin
	I[1] = 1'b0;
	# 20000;
	repeat(12)
	begin
		I[1] = 1'b1;
		I[1] = #40000 1'b0;
		# 40000;
	end
	I[1] = 1'b1;
end 
// I[ 0 ]
always
begin
	I[0] = 1'b1;
	I[0] = #20000 1'b0;
	#20000;
end 

main_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.I(I),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.Alu(Alu),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.ins(ins),
	.OA(OA),
	.OB(OB),
	.Output(Output),
	.RDA(RDA),
	.RDB(RDB),
	.WR(WR),
	.sampler_rx(sampler)
);
endmodule

