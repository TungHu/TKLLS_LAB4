// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/16/2023 12:28:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	CLK,
	I,
	sampler_tx
);
input  CLK;
input [15:0] I;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or I)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	hOA,
	hOB,
	hOC,
	hOD,
	hOE,
	hOF,
	hOG,
	oOA,
	oOB,
	oOC,
	oOD,
	oOE,
	oOF,
	oOG,
	Output,
	Sign,
	tOA,
	tOB,
	tOC,
	tOD,
	tOE,
	tOF,
	tOG,
	sampler_rx
);
input  hOA;
input  hOB;
input  hOC;
input  hOD;
input  hOE;
input  hOF;
input  hOG;
input  oOA;
input  oOB;
input  oOC;
input  oOD;
input  oOE;
input  oOF;
input  oOG;
input [15:0] Output;
input  Sign;
input  tOA;
input  tOB;
input  tOC;
input  tOD;
input  tOE;
input  tOF;
input  tOG;
input sampler_rx;

reg  hOA_expected;
reg  hOB_expected;
reg  hOC_expected;
reg  hOD_expected;
reg  hOE_expected;
reg  hOF_expected;
reg  hOG_expected;
reg  oOA_expected;
reg  oOB_expected;
reg  oOC_expected;
reg  oOD_expected;
reg  oOE_expected;
reg  oOF_expected;
reg  oOG_expected;
reg [15:0] Output_expected;
reg  Sign_expected;
reg  tOA_expected;
reg  tOB_expected;
reg  tOC_expected;
reg  tOD_expected;
reg  tOE_expected;
reg  tOF_expected;
reg  tOG_expected;

reg  hOA_prev;
reg  hOB_prev;
reg  hOC_prev;
reg  hOD_prev;
reg  hOE_prev;
reg  hOF_prev;
reg  hOG_prev;
reg  oOA_prev;
reg  oOB_prev;
reg  oOC_prev;
reg  oOD_prev;
reg  oOE_prev;
reg  oOF_prev;
reg  oOG_prev;
reg [15:0] Output_prev;
reg  Sign_prev;
reg  tOA_prev;
reg  tOB_prev;
reg  tOC_prev;
reg  tOD_prev;
reg  tOE_prev;
reg  tOF_prev;
reg  tOG_prev;

reg  hOA_expected_prev;
reg  hOB_expected_prev;
reg  hOC_expected_prev;
reg  hOD_expected_prev;
reg  hOE_expected_prev;
reg  hOF_expected_prev;
reg  hOG_expected_prev;
reg  oOA_expected_prev;
reg  oOB_expected_prev;
reg  oOC_expected_prev;
reg  oOD_expected_prev;
reg  oOE_expected_prev;
reg  oOF_expected_prev;
reg  oOG_expected_prev;
reg [15:0] Output_expected_prev;
reg  Sign_expected_prev;
reg  tOA_expected_prev;
reg  tOB_expected_prev;
reg  tOC_expected_prev;
reg  tOD_expected_prev;
reg  tOE_expected_prev;
reg  tOF_expected_prev;
reg  tOG_expected_prev;

reg  last_hOA_exp;
reg  last_hOB_exp;
reg  last_hOC_exp;
reg  last_hOD_exp;
reg  last_hOE_exp;
reg  last_hOF_exp;
reg  last_hOG_exp;
reg  last_oOA_exp;
reg  last_oOB_exp;
reg  last_oOC_exp;
reg  last_oOD_exp;
reg  last_oOE_exp;
reg  last_oOF_exp;
reg  last_oOG_exp;
reg [15:0] last_Output_exp;
reg  last_Sign_exp;
reg  last_tOA_exp;
reg  last_tOB_exp;
reg  last_tOC_exp;
reg  last_tOD_exp;
reg  last_tOE_exp;
reg  last_tOF_exp;
reg  last_tOG_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:23] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 23'b1;
end

// update real /o prevs

always @(trigger)
begin
	hOA_prev = hOA;
	hOB_prev = hOB;
	hOC_prev = hOC;
	hOD_prev = hOD;
	hOE_prev = hOE;
	hOF_prev = hOF;
	hOG_prev = hOG;
	oOA_prev = oOA;
	oOB_prev = oOB;
	oOC_prev = oOC;
	oOD_prev = oOD;
	oOE_prev = oOE;
	oOF_prev = oOF;
	oOG_prev = oOG;
	Output_prev = Output;
	Sign_prev = Sign;
	tOA_prev = tOA;
	tOB_prev = tOB;
	tOC_prev = tOC;
	tOD_prev = tOD;
	tOE_prev = tOE;
	tOF_prev = tOF;
	tOG_prev = tOG;
end

// update expected /o prevs

always @(trigger)
begin
	hOA_expected_prev = hOA_expected;
	hOB_expected_prev = hOB_expected;
	hOC_expected_prev = hOC_expected;
	hOD_expected_prev = hOD_expected;
	hOE_expected_prev = hOE_expected;
	hOF_expected_prev = hOF_expected;
	hOG_expected_prev = hOG_expected;
	oOA_expected_prev = oOA_expected;
	oOB_expected_prev = oOB_expected;
	oOC_expected_prev = oOC_expected;
	oOD_expected_prev = oOD_expected;
	oOE_expected_prev = oOE_expected;
	oOF_expected_prev = oOF_expected;
	oOG_expected_prev = oOG_expected;
	Output_expected_prev = Output_expected;
	Sign_expected_prev = Sign_expected;
	tOA_expected_prev = tOA_expected;
	tOB_expected_prev = tOB_expected;
	tOC_expected_prev = tOC_expected;
	tOD_expected_prev = tOD_expected;
	tOE_expected_prev = tOE_expected;
	tOF_expected_prev = tOF_expected;
	tOG_expected_prev = tOG_expected;
end


// expected \Output [ 15 ]
initial
begin
	Output_expected[15] = 1'bX;
end 
// expected \Output [ 14 ]
initial
begin
	Output_expected[14] = 1'bX;
end 
// expected \Output [ 13 ]
initial
begin
	Output_expected[13] = 1'bX;
end 
// expected \Output [ 12 ]
initial
begin
	Output_expected[12] = 1'bX;
end 
// expected \Output [ 11 ]
initial
begin
	Output_expected[11] = 1'bX;
end 
// expected \Output [ 10 ]
initial
begin
	Output_expected[10] = 1'bX;
end 
// expected \Output [ 9 ]
initial
begin
	Output_expected[9] = 1'bX;
end 
// expected \Output [ 8 ]
initial
begin
	Output_expected[8] = 1'bX;
end 
// expected \Output [ 7 ]
initial
begin
	Output_expected[7] = 1'bX;
end 
// expected \Output [ 6 ]
initial
begin
	Output_expected[6] = 1'bX;
end 
// expected \Output [ 5 ]
initial
begin
	Output_expected[5] = 1'bX;
end 
// expected \Output [ 4 ]
initial
begin
	Output_expected[4] = 1'bX;
end 
// expected \Output [ 3 ]
initial
begin
	Output_expected[3] = 1'bX;
end 
// expected \Output [ 2 ]
initial
begin
	Output_expected[2] = 1'bX;
end 
// expected \Output [ 1 ]
initial
begin
	Output_expected[1] = 1'bX;
end 
// expected \Output [ 0 ]
initial
begin
	Output_expected[0] = 1'bX;
end 

// expected hOA
initial
begin
	hOA_expected = 1'bX;
end 

// expected hOB
initial
begin
	hOB_expected = 1'bX;
end 

// expected hOC
initial
begin
	hOC_expected = 1'bX;
end 

// expected hOD
initial
begin
	hOD_expected = 1'bX;
end 

// expected hOE
initial
begin
	hOE_expected = 1'bX;
end 

// expected hOF
initial
begin
	hOF_expected = 1'bX;
end 

// expected hOG
initial
begin
	hOG_expected = 1'bX;
end 

// expected oOA
initial
begin
	oOA_expected = 1'bX;
end 

// expected oOB
initial
begin
	oOB_expected = 1'bX;
end 

// expected oOC
initial
begin
	oOC_expected = 1'bX;
end 

// expected oOD
initial
begin
	oOD_expected = 1'bX;
end 

// expected oOE
initial
begin
	oOE_expected = 1'bX;
end 

// expected oOF
initial
begin
	oOF_expected = 1'bX;
end 

// expected oOG
initial
begin
	oOG_expected = 1'bX;
end 

// expected Sign
initial
begin
	Sign_expected = 1'bX;
end 

// expected tOA
initial
begin
	tOA_expected = 1'bX;
end 

// expected tOB
initial
begin
	tOB_expected = 1'bX;
end 

// expected tOC
initial
begin
	tOC_expected = 1'bX;
end 

// expected tOD
initial
begin
	tOD_expected = 1'bX;
end 

// expected tOE
initial
begin
	tOE_expected = 1'bX;
end 

// expected tOF
initial
begin
	tOF_expected = 1'bX;
end 

// expected tOG
initial
begin
	tOG_expected = 1'bX;
end 
// generate trigger
always @(hOA_expected or hOA or hOB_expected or hOB or hOC_expected or hOC or hOD_expected or hOD or hOE_expected or hOE or hOF_expected or hOF or hOG_expected or hOG or oOA_expected or oOA or oOB_expected or oOB or oOC_expected or oOC or oOD_expected or oOD or oOE_expected or oOE or oOF_expected or oOF or oOG_expected or oOG or Output_expected or Output or Sign_expected or Sign or tOA_expected or tOA or tOB_expected or tOB or tOC_expected or tOC or tOD_expected or tOD or tOE_expected or tOE or tOF_expected or tOF or tOG_expected or tOG)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hOA = %b | expected hOB = %b | expected hOC = %b | expected hOD = %b | expected hOE = %b | expected hOF = %b | expected hOG = %b | expected oOA = %b | expected oOB = %b | expected oOC = %b | expected oOD = %b | expected oOE = %b | expected oOF = %b | expected oOG = %b | expected Output = %b | expected Sign = %b | expected tOA = %b | expected tOB = %b | expected tOC = %b | expected tOD = %b | expected tOE = %b | expected tOF = %b | expected tOG = %b | ",hOA_expected_prev,hOB_expected_prev,hOC_expected_prev,hOD_expected_prev,hOE_expected_prev,hOF_expected_prev,hOG_expected_prev,oOA_expected_prev,oOB_expected_prev,oOC_expected_prev,oOD_expected_prev,oOE_expected_prev,oOF_expected_prev,oOG_expected_prev,Output_expected_prev,Sign_expected_prev,tOA_expected_prev,tOB_expected_prev,tOC_expected_prev,tOD_expected_prev,tOE_expected_prev,tOF_expected_prev,tOG_expected_prev);
	$display("| real hOA = %b | real hOB = %b | real hOC = %b | real hOD = %b | real hOE = %b | real hOF = %b | real hOG = %b | real oOA = %b | real oOB = %b | real oOC = %b | real oOD = %b | real oOE = %b | real oOF = %b | real oOG = %b | real Output = %b | real Sign = %b | real tOA = %b | real tOB = %b | real tOC = %b | real tOD = %b | real tOE = %b | real tOF = %b | real tOG = %b | ",hOA_prev,hOB_prev,hOC_prev,hOD_prev,hOE_prev,hOF_prev,hOG_prev,oOA_prev,oOB_prev,oOC_prev,oOD_prev,oOE_prev,oOF_prev,oOG_prev,Output_prev,Sign_prev,tOA_prev,tOB_prev,tOC_prev,tOD_prev,tOE_prev,tOF_prev,tOG_prev);
`endif
	if (
		( hOA_expected_prev !== 1'bx ) && ( hOA_prev !== hOA_expected_prev )
		&& ((hOA_expected_prev !== last_hOA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hOA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hOA_expected_prev);
		$display ("     Real value = %b", hOA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hOA_exp = hOA_expected_prev;
	end
	if (
		( hOB_expected_prev !== 1'bx ) && ( hOB_prev !== hOB_expected_prev )
		&& ((hOB_expected_prev !== last_hOB_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hOB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hOB_expected_prev);
		$display ("     Real value = %b", hOB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hOB_exp = hOB_expected_prev;
	end
	if (
		( hOC_expected_prev !== 1'bx ) && ( hOC_prev !== hOC_expected_prev )
		&& ((hOC_expected_prev !== last_hOC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hOC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hOC_expected_prev);
		$display ("     Real value = %b", hOC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hOC_exp = hOC_expected_prev;
	end
	if (
		( hOD_expected_prev !== 1'bx ) && ( hOD_prev !== hOD_expected_prev )
		&& ((hOD_expected_prev !== last_hOD_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hOD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hOD_expected_prev);
		$display ("     Real value = %b", hOD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hOD_exp = hOD_expected_prev;
	end
	if (
		( hOE_expected_prev !== 1'bx ) && ( hOE_prev !== hOE_expected_prev )
		&& ((hOE_expected_prev !== last_hOE_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hOE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hOE_expected_prev);
		$display ("     Real value = %b", hOE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hOE_exp = hOE_expected_prev;
	end
	if (
		( hOF_expected_prev !== 1'bx ) && ( hOF_prev !== hOF_expected_prev )
		&& ((hOF_expected_prev !== last_hOF_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hOF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hOF_expected_prev);
		$display ("     Real value = %b", hOF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hOF_exp = hOF_expected_prev;
	end
	if (
		( hOG_expected_prev !== 1'bx ) && ( hOG_prev !== hOG_expected_prev )
		&& ((hOG_expected_prev !== last_hOG_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hOG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hOG_expected_prev);
		$display ("     Real value = %b", hOG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hOG_exp = hOG_expected_prev;
	end
	if (
		( oOA_expected_prev !== 1'bx ) && ( oOA_prev !== oOA_expected_prev )
		&& ((oOA_expected_prev !== last_oOA_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oOA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oOA_expected_prev);
		$display ("     Real value = %b", oOA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oOA_exp = oOA_expected_prev;
	end
	if (
		( oOB_expected_prev !== 1'bx ) && ( oOB_prev !== oOB_expected_prev )
		&& ((oOB_expected_prev !== last_oOB_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oOB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oOB_expected_prev);
		$display ("     Real value = %b", oOB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oOB_exp = oOB_expected_prev;
	end
	if (
		( oOC_expected_prev !== 1'bx ) && ( oOC_prev !== oOC_expected_prev )
		&& ((oOC_expected_prev !== last_oOC_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oOC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oOC_expected_prev);
		$display ("     Real value = %b", oOC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oOC_exp = oOC_expected_prev;
	end
	if (
		( oOD_expected_prev !== 1'bx ) && ( oOD_prev !== oOD_expected_prev )
		&& ((oOD_expected_prev !== last_oOD_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oOD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oOD_expected_prev);
		$display ("     Real value = %b", oOD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_oOD_exp = oOD_expected_prev;
	end
	if (
		( oOE_expected_prev !== 1'bx ) && ( oOE_prev !== oOE_expected_prev )
		&& ((oOE_expected_prev !== last_oOE_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oOE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oOE_expected_prev);
		$display ("     Real value = %b", oOE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_oOE_exp = oOE_expected_prev;
	end
	if (
		( oOF_expected_prev !== 1'bx ) && ( oOF_prev !== oOF_expected_prev )
		&& ((oOF_expected_prev !== last_oOF_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oOF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oOF_expected_prev);
		$display ("     Real value = %b", oOF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_oOF_exp = oOF_expected_prev;
	end
	if (
		( oOG_expected_prev !== 1'bx ) && ( oOG_prev !== oOG_expected_prev )
		&& ((oOG_expected_prev !== last_oOG_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oOG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oOG_expected_prev);
		$display ("     Real value = %b", oOG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_oOG_exp = oOG_expected_prev;
	end
	if (
		( Output_expected_prev[0] !== 1'bx ) && ( Output_prev[0] !== Output_expected_prev[0] )
		&& ((Output_expected_prev[0] !== last_Output_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[0] = Output_expected_prev[0];
	end
	if (
		( Output_expected_prev[1] !== 1'bx ) && ( Output_prev[1] !== Output_expected_prev[1] )
		&& ((Output_expected_prev[1] !== last_Output_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[1] = Output_expected_prev[1];
	end
	if (
		( Output_expected_prev[2] !== 1'bx ) && ( Output_prev[2] !== Output_expected_prev[2] )
		&& ((Output_expected_prev[2] !== last_Output_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[2] = Output_expected_prev[2];
	end
	if (
		( Output_expected_prev[3] !== 1'bx ) && ( Output_prev[3] !== Output_expected_prev[3] )
		&& ((Output_expected_prev[3] !== last_Output_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[3] = Output_expected_prev[3];
	end
	if (
		( Output_expected_prev[4] !== 1'bx ) && ( Output_prev[4] !== Output_expected_prev[4] )
		&& ((Output_expected_prev[4] !== last_Output_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[4] = Output_expected_prev[4];
	end
	if (
		( Output_expected_prev[5] !== 1'bx ) && ( Output_prev[5] !== Output_expected_prev[5] )
		&& ((Output_expected_prev[5] !== last_Output_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[5] = Output_expected_prev[5];
	end
	if (
		( Output_expected_prev[6] !== 1'bx ) && ( Output_prev[6] !== Output_expected_prev[6] )
		&& ((Output_expected_prev[6] !== last_Output_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[6] = Output_expected_prev[6];
	end
	if (
		( Output_expected_prev[7] !== 1'bx ) && ( Output_prev[7] !== Output_expected_prev[7] )
		&& ((Output_expected_prev[7] !== last_Output_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[7] = Output_expected_prev[7];
	end
	if (
		( Output_expected_prev[8] !== 1'bx ) && ( Output_prev[8] !== Output_expected_prev[8] )
		&& ((Output_expected_prev[8] !== last_Output_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[8] = Output_expected_prev[8];
	end
	if (
		( Output_expected_prev[9] !== 1'bx ) && ( Output_prev[9] !== Output_expected_prev[9] )
		&& ((Output_expected_prev[9] !== last_Output_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[9] = Output_expected_prev[9];
	end
	if (
		( Output_expected_prev[10] !== 1'bx ) && ( Output_prev[10] !== Output_expected_prev[10] )
		&& ((Output_expected_prev[10] !== last_Output_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[10] = Output_expected_prev[10];
	end
	if (
		( Output_expected_prev[11] !== 1'bx ) && ( Output_prev[11] !== Output_expected_prev[11] )
		&& ((Output_expected_prev[11] !== last_Output_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[11] = Output_expected_prev[11];
	end
	if (
		( Output_expected_prev[12] !== 1'bx ) && ( Output_prev[12] !== Output_expected_prev[12] )
		&& ((Output_expected_prev[12] !== last_Output_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[12] = Output_expected_prev[12];
	end
	if (
		( Output_expected_prev[13] !== 1'bx ) && ( Output_prev[13] !== Output_expected_prev[13] )
		&& ((Output_expected_prev[13] !== last_Output_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[13] = Output_expected_prev[13];
	end
	if (
		( Output_expected_prev[14] !== 1'bx ) && ( Output_prev[14] !== Output_expected_prev[14] )
		&& ((Output_expected_prev[14] !== last_Output_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[14] = Output_expected_prev[14];
	end
	if (
		( Output_expected_prev[15] !== 1'bx ) && ( Output_prev[15] !== Output_expected_prev[15] )
		&& ((Output_expected_prev[15] !== last_Output_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Output_exp[15] = Output_expected_prev[15];
	end
	if (
		( Sign_expected_prev !== 1'bx ) && ( Sign_prev !== Sign_expected_prev )
		&& ((Sign_expected_prev !== last_Sign_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Sign_exp = Sign_expected_prev;
	end
	if (
		( tOA_expected_prev !== 1'bx ) && ( tOA_prev !== tOA_expected_prev )
		&& ((tOA_expected_prev !== last_tOA_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOA_expected_prev);
		$display ("     Real value = %b", tOA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_tOA_exp = tOA_expected_prev;
	end
	if (
		( tOB_expected_prev !== 1'bx ) && ( tOB_prev !== tOB_expected_prev )
		&& ((tOB_expected_prev !== last_tOB_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOB_expected_prev);
		$display ("     Real value = %b", tOB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_tOB_exp = tOB_expected_prev;
	end
	if (
		( tOC_expected_prev !== 1'bx ) && ( tOC_prev !== tOC_expected_prev )
		&& ((tOC_expected_prev !== last_tOC_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOC_expected_prev);
		$display ("     Real value = %b", tOC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_tOC_exp = tOC_expected_prev;
	end
	if (
		( tOD_expected_prev !== 1'bx ) && ( tOD_prev !== tOD_expected_prev )
		&& ((tOD_expected_prev !== last_tOD_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOD_expected_prev);
		$display ("     Real value = %b", tOD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_tOD_exp = tOD_expected_prev;
	end
	if (
		( tOE_expected_prev !== 1'bx ) && ( tOE_prev !== tOE_expected_prev )
		&& ((tOE_expected_prev !== last_tOE_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOE_expected_prev);
		$display ("     Real value = %b", tOE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_tOE_exp = tOE_expected_prev;
	end
	if (
		( tOF_expected_prev !== 1'bx ) && ( tOF_prev !== tOF_expected_prev )
		&& ((tOF_expected_prev !== last_tOF_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOF_expected_prev);
		$display ("     Real value = %b", tOF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_tOF_exp = tOF_expected_prev;
	end
	if (
		( tOG_expected_prev !== 1'bx ) && ( tOG_prev !== tOG_expected_prev )
		&& ((tOG_expected_prev !== last_tOG_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOG_expected_prev);
		$display ("     Real value = %b", tOG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_tOG_exp = tOG_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] I;
// wires                                               
wire hOA;
wire hOB;
wire hOC;
wire hOD;
wire hOE;
wire hOF;
wire hOG;
wire oOA;
wire oOB;
wire oOC;
wire oOD;
wire oOE;
wire oOF;
wire oOG;
wire [15:0] Output;
wire Sign;
wire tOA;
wire tOB;
wire tOC;
wire tOD;
wire tOE;
wire tOF;
wire tOG;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.hOA(hOA),
	.hOB(hOB),
	.hOC(hOC),
	.hOD(hOD),
	.hOE(hOE),
	.hOF(hOF),
	.hOG(hOG),
	.I(I),
	.oOA(oOA),
	.oOB(oOB),
	.oOC(oOC),
	.oOD(oOD),
	.oOE(oOE),
	.oOF(oOF),
	.oOG(oOG),
	.\Output (Output),
	.Sign(Sign),
	.tOA(tOA),
	.tOB(tOB),
	.tOC(tOC),
	.tOD(tOD),
	.tOE(tOE),
	.tOF(tOF),
	.tOG(tOG)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// I[ 15 ]
initial
begin
	I[15] = 1'b1;
	I[15] = #40000 1'b0;
end 
// I[ 14 ]
initial
begin
	I[14] = 1'b1;
	I[14] = #40000 1'b0;
end 
// I[ 13 ]
initial
begin
	I[13] = 1'b1;
	I[13] = #40000 1'b0;
end 
// I[ 12 ]
initial
begin
	I[12] = 1'b1;
	I[12] = #40000 1'b0;
end 
// I[ 11 ]
initial
begin
	I[11] = 1'b1;
	I[11] = #40000 1'b0;
end 
// I[ 10 ]
initial
begin
	I[10] = 1'b1;
	I[10] = #40000 1'b0;
end 
// I[ 9 ]
initial
begin
	I[9] = 1'b1;
	I[9] = #40000 1'b0;
end 
// I[ 8 ]
initial
begin
	I[8] = 1'b1;
	I[8] = #40000 1'b0;
end 
// I[ 7 ]
initial
begin
	I[7] = 1'b1;
	I[7] = #40000 1'b0;
end 
// I[ 6 ]
initial
begin
	I[6] = 1'b1;
	I[6] = #40000 1'b0;
end 
// I[ 5 ]
initial
begin
	I[5] = 1'b1;
	I[5] = #40000 1'b0;
	I[5] = #640000 1'b1;
end 
// I[ 4 ]
initial
begin
	I[4] = 1'b1;
	I[4] = #40000 1'b0;
	I[4] = #320000 1'b1;
	I[4] = #320000 1'b0;
end 
// I[ 3 ]
initial
begin
	I[3] = 1'b1;
	# 40000;
	repeat(3)
	begin
		I[3] = 1'b0;
		I[3] = #160000 1'b1;
		# 160000;
	end
end 
// I[ 2 ]
initial
begin
	I[2] = 1'b1;
	# 40000;
	repeat(6)
	begin
		I[2] = 1'b0;
		I[2] = #80000 1'b1;
		# 80000;
	end
end 
// I[ 1 ]
initial
begin
	repeat(12)
	begin
		I[1] = 1'b1;
		I[1] = #40000 1'b0;
		# 40000;
	end
	I[1] = 1'b1;
end 
// I[ 0 ]
always
begin
	I[0] = 1'b0;
	I[0] = #20000 1'b1;
	#20000;
end 

main_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.I(I),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.hOA(hOA),
	.hOB(hOB),
	.hOC(hOC),
	.hOD(hOD),
	.hOE(hOE),
	.hOF(hOF),
	.hOG(hOG),
	.oOA(oOA),
	.oOB(oOB),
	.oOC(oOC),
	.oOD(oOD),
	.oOE(oOE),
	.oOF(oOF),
	.oOG(oOG),
	.Output(Output),
	.Sign(Sign),
	.tOA(tOA),
	.tOB(tOB),
	.tOC(tOC),
	.tOD(tOD),
	.tOE(tOE),
	.tOF(tOF),
	.tOG(tOG),
	.sampler_rx(sampler)
);
endmodule

